"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unmockAllTestDestinations = exports.mockAllTestDestinations = exports.unmockTestDestination = exports.setTestDestination = exports.mockTestDestination = void 0;
const internal_1 = require("@sap-cloud-sdk/connectivity/internal");
const test_destination_provider_1 = require("./test-destination-provider");
/**
 * Add a destination with the given name from the `systems.json` and `credentials.json` files to the `destinations` environment variable.
 *
 * Throws an error if a destination with the same name as the given test destination already exists.
 * @param name - Name of the test destination to add to the `destinations` environment variable.
 * @param options - References to the `systems.json` and `credentials.json` files.
 */
function mockTestDestination(name, options) {
    const mockedDestination = (0, test_destination_provider_1.getTestDestinationByAlias)(name, options);
    setTestDestination(mockedDestination);
}
exports.mockTestDestination = mockTestDestination;
/**
 * Set a given destination in the `destinations` environment variable.
 *
 * Throws an error if a destination with the same name as the given test destination already exists.
 * @param destination - Test destination to add to the `destinations` environment variable.
 */
function setTestDestination(destination) {
    const currentDestinations = getDestinationsFromEnv();
    const existingNames = new Set(currentDestinations.map(dest => {
        if (!dest.name) {
            throw Error('The destination name is undefined.');
        }
        return dest.name;
    }));
    if (!destination.name) {
        throw Error('The destination name is undefined.');
    }
    (0, internal_1.validateNameAvailable)(destination.name, existingNames);
    destination.isTestDestination = true;
    (0, internal_1.setDestinationsInEnv)([...currentDestinations, destination]);
}
exports.setTestDestination = setTestDestination;
/**
 * Removes a destination with the given name from the destinations environment variable. If the given destination name is not found calling this function has no effect.
 * This function should be called to invert the behavior of {@link mockTestDestination}() and {@link setTestDestination}().
 * @param name - Name of the mocked destination to remove.
 */
function unmockTestDestination(name) {
    const currentDestinations = getDestinationsFromEnv();
    const cleanedDestinations = currentDestinations.filter(destination => !(destination.isTestDestination && destination.name === name));
    (0, internal_1.setDestinationsInEnv)(cleanedDestinations);
}
exports.unmockTestDestination = unmockTestDestination;
/**
 * Add all destinations from the `systems.json` and `credentials.json` files to the `destinations` environment variable.
 *
 * Throws an error if a destination with the same name as the given test destinations already exists.
 * @param options - References to the `systems.json` and `credentials.json` files.
 */
function mockAllTestDestinations(options) {
    const testDestinations = (0, test_destination_provider_1.getTestDestinations)(options);
    const currentDestinations = getDestinationsFromEnv();
    const existingNames = new Set(currentDestinations.map(dest => {
        if (!dest.name) {
            throw Error('The destination name is undefined.');
        }
        return dest.name;
    }));
    testDestinations.forEach(dest => {
        if (!dest.name) {
            throw Error("At least one of the provided destinations is missing a the 'name' property!");
        }
        (0, internal_1.validateNameAvailable)(dest.name, existingNames);
        currentDestinations.push(dest);
    });
    (0, internal_1.setDestinationsInEnv)(currentDestinations);
}
exports.mockAllTestDestinations = mockAllTestDestinations;
/**
 * Removes all test destinations stored in `systems.json` and `credentials.json` files or added through {@link setTestDestination}() from the `destinations` environment variable.
 *
 * This function should be called to invert the behavior of {@link mockAllTestDestinations}() and other add single mocked destination functions.
 */
function unmockAllTestDestinations() {
    const currentDestinations = getDestinationsFromEnv();
    const cleanedDestinations = currentDestinations.filter(destination => !destination.isTestDestination);
    (0, internal_1.setDestinationsInEnv)(cleanedDestinations);
}
exports.unmockAllTestDestinations = unmockAllTestDestinations;
function getDestinationsFromEnv() {
    try {
        const envDestinations = process.env['destinations'] || '[]';
        return JSON.parse(envDestinations);
    }
    catch (error) {
        throw new Error(`Destinations environment variable cannot be read: ${error.message}`);
    }
}
//# sourceMappingURL=test-destination-mocker.js.map